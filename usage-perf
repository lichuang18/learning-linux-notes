perf  
  stat      对全局性能进行统计
  list      查看当前系统支持的性能事件
  record    记录信息到perf.data
  report    生成报告
  sched     分析内核调度器性能
  test      对系统进行健全性测试
  mem       分析内存slab性能
  bench     对系统性能进行摸底
  kmem      针对(内核内存)slab子系统性能分析
  kvm       针对kvm虚拟化分析
  evlist    列出记录的性能事件
  inject    读取perf record工具记录的事件流，并将其定向到标准输出
  diff      对两个记录进行diff
  lock      分析锁性能
  timechart #perf timechart record记录事件，perf timechart生成output.svg文档，可视化工具 
  top       可以实时查看当前系统进程函数占用率情况
  trace     记录系统调用轨迹
  probe     可以自定义动态事件
  annotate  显示perf.data函数代码
  archive   将相关符号打包，方便在其它机器进行分析
  top
  -e：指定性能事件
  -a：显示在所有CPU上的性能统计信息
  -C：显示在指定CPU上的性能统计信息
  -p：指定进程PID
  -t：指定线程TID
  -K：隐藏内核统计信息
  -U：隐藏用户空间的统计信息
  -s：指定待解析的符号信息
  stat
  -e：选择性能事件 
  -i：禁止子任务继承父任务的性能计数器。 
  -r：重复执行 n 次目标程序，并给出性能指标在n 次执行中的变化范围。 
  -n：仅输出目标程序的执行时间，而不开启任何性能计数器。 
  -a：指定全部cpu 
  -C：指定某个cpu 
  -A：将给出每个处理器上相应的信息。 
  -p：指定待分析的进程id 
  -t：指定待分析的线程id
  record
  -e：选择性能事件
  -p：待分析进程的id
  -t：待分析线程的id
  -a：分析整个系统的性能
  -C：只采集指定CPU数据
  -c：事件的采样周期
  -o：指定输出文件，默认为perf.data
  -A：以append的方式写输出文件
  -f：以OverWrite的方式写输出文件
  -g：记录函数间的调用关系
  report
  -i：输入的数据文件 
  -v：显示每个符号的地址 
  -d <dos>：只显示指定dos的符号 
  -C：只显示指定comm的信息（Comm. 触发事件的进程名） 
  -S：只考虑指定符号 
  -U：只显示已解析的符号 
  -g[type,min,order]：显示调用关系，具体等同于perf top命令中的-g 
  -c：只显示指定cpu采样信息 
  -M：以指定汇编指令风格显示 
  –source：以汇编和source的形式进行显示 
  -p<regex>：用指定正则表达式过滤调用函数
  
  -perf stat 在没有root权限的情况下，执行perf stat命令只会统计用户空间中发生的事件(:u 表示用户空间)
  示例：  perf stat ./t1     perf stat ls
          perf stat -p 3592 sleep 10
          perf stat -a -A sleep seconds统计CPU聚合计数禁用的事件数量
  -perf record
   不加具体的记录对象，他会持续记录，直到ctrl+c停止
        --call-graph    捕获调用图数据
        perf record --call-graph method command      method包括fp（frame pointer）、dwarf、lbr（last branch）
         perf record -C 0,1 sleep seconds   记录多cpu信息，用“，”分割
         perf record -C 0-2 sleep seconds
flame graph（火焰图）
  git clone https://github.com/brendangregg/FlameGraph.git
  不需要额外安装，git下来就行，能够进入该文件执行脚本即可
  需要和perf联用，使用perf record记录的perf.data数据来生成火焰图
  火焰图含义：
    y 轴表示调用栈，每一层都是一个函数。调用栈越深，火焰就越高，顶部就是正在执行的函数，下方都是它的父函数。
    x 轴表示抽样数，如果一个函数在 x 轴占据的宽度越宽，就表示它被抽到的次数多，即执行的时间长。注意，x 轴不代表时间，而是所有的调用栈合并后，按字母顺序排列的。
    火焰图就是看顶层的哪个函数占据的宽度最大。只要有"平顶"（plateaus），就表示该函数可能存在性能问题。
  
  
  
  具体步骤：
    1.使用perf生成perf.data
      实例：perf record -F 99 -a -g -- sleep 60  对所有（-a）CPU进行以99Hz进行采集，每秒99次，
                                                如果99次都返回同一个函数名，说明CPU这一秒都在执行这条指令，可能存在问题
                                                执行60s会生成perf.data文件   -g表示记录调用栈
    2.perf script -i perf.data &> perf.unfold
    3../FlameGraph/stackcollapse-perf.pl perf.unfold &> perf.folded
    4../FlameGraph/flamegraph.pl perf.folded > perf.svg
                                                
                                                
  
